@page "/FlightVisualizer"
@using GuiWebApp.Client.Services;
@using System.Text.Json;
@using System.Globalization;
@inject MapService map
@inject HttpClient httpClient

<PageTitle>Flight Visualizer</PageTitle>
<h3>Flight Visualizer</h3>

<div class="row">
    <div class="col-xxl-3 col-xl-4">
        <p>Input the latitude and longitude for a point below:</p>
            <div class="row">
                <div class="col-sm d-flex justify-content-end align-items-center">
                    <label class="form-plaintext ml-2 mr-2">Latitude</label>
                </div>
                <div class="col-md">
                    <input class="form-control ml-2 mr-2" placeholder="latitude" @bind="Latitude" />
                </div>
            </div>
            <div class="row" style="margin-top: 0.4em;">
                <div class="col-sm d-flex justify-content-end align-items-center">
                    <label class="form-plaintext ml-2 mr-2">Longtitude</label>
                </div>
                <div class="col-md">
                    <input class="form-control ml-2 mr-2" placeholder="longitude" @bind="Longitude" />
                </div>
            </div>
        <button class="btn btn-primary mb-2" @onclick="AddMarker" style="margin-top: 0.4em"> Add point</button>

       
        <p>Input the Flight-ID:</p> 
        <div class="form-check mb-2">
            <input class="form-check-input" type="checkbox" @bind="UseFallbackApi" id="fallbackApi">
            <label class="form-check-label" for="fallbackApi">
                Use Fallback API?
            </label>
        </div>
        <div class="form-group mb-2">
            <input class="form-control ml-2 mr-2" list="test-flightids" placeholder="Flight ID" @bind="FlightId" />
        </div>
        <datalist id="test-flightids">
            <option value="1935773929" />
            <option value="1935812186" />
            <option value="1938200218" />
            <option value="1679057623061" />
        </datalist>
        <div class="d-flex align-items-center justify-content-between">
            <div>
            <button class="btn btn-primary" @onclick="CreateFlightPath"> Create Path for Flight ID</button>
            </div>
            <div>
            <select name="color" id="color" @bind="Color" class="form-select">
                <option value="red">Red</option>
                <option value="blue">Blue</option>  
                <option value="green">Green</option>
                <option value="yellow">Yellow</option>
            </select>
            </div>
        </div>

        @if (LastException is { } e)
        {
            <div class="card text-bg-danger mb-3 mt-4" style="max-width: 60rem;">
                <div class="card-header">Exception: <b>@e.GetType().Name</b></div>
                <div class="card-body">
                    <h5 class="card-title">@e.Message</h5>
                    <pre>@e.StackTrace</pre>
                </div>
            </div>
        }

        @if (DetectingHoldingPattern)
        {
            <div class="col mt-2 p-4 d-flex flex-column justify-content-center align-items-center">
                <p>Detecting holding pattern...</p>
                <Spinner Small="true" />
            </div>
        }

        @if (LastHoldingResult is { } holdingResult)
        {
            <div class="card text-bg-@(holdingResult.IsHolding ? "success" : "danger") mb-3 mt-4" style="max-width: 60rem;">
                <div class="card-header"><b>Holding result</b></div>
                <div class="card-body">
                    <h5 class="card-title">Is holding: @holdingResult.IsHolding</h5>
                    <p>Detection took: @holdingResult.DetectionTime.TotalMilliseconds.ToString("0.00", CultureInfo.InvariantCulture) ms.</p>
                </div>
            </div>
        }

    </div>
    <div class="col-xxl-9 col-xl-8 position-relative">
        @if (IsLoading)
        {
            <Backdrop>
                <h3>Loading...</h3>
                <Spinner />
            </Backdrop>
        }

        <div id="map" style="height:82vh; z-index: 8">
        </div>
    </div>
</div>




@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await ResetMap();
        }
    }

    private async Task ResetMap()
    {
        await map.CreateMap(55.676098, 12.568337, 10); // Starting Latitude, Longitude and Zoom for the map. This is set to Copenhagen.
    }

    public double Latitude { get; set; }
    public double Longitude { get; set; }
    public long FlightId { get; set; }
    public List<TrafficPosition>? TrafficData { get; set; }

    public bool IsLoading { get; set; }
    public bool UseFallbackApi { get; set; } = true;
    public string Color { get; set; } = "red";

    public Exception? LastException { get; set; }
    public bool DetectingHoldingPattern { get; set; }
    public HoldingResult? LastHoldingResult { get; set; }

    private async Task CheckForHolding()
    {
        LastHoldingResult = null;
        DetectingHoldingPattern = true;
        StateHasChanged();
        try
        {
            var result = await httpClient.PostAsJsonAsync("Engine/analyze", new AnalyzeFlightRequest()
                {
                    FlightId = FlightId,
                    UseFallback = UseFallbackApi
                });

            if (result.IsSuccessStatusCode)
            {
                LastHoldingResult = await result.Content.ReadFromJsonAsync<HoldingResult>();
            }
            else
            {
                LastException = new Exception($"Could not verify Holding Pattern. Got status: {result.StatusCode}: {result.Content}");
            }
        }finally{
            DetectingHoldingPattern = false;
            StateHasChanged();
        }
    }

    private async Task AddMarker()
    {
        await map.AddPoint(Latitude, Longitude);
    }

    private async Task CreateTestPath()
    {
        var coords = new List<List<double>>()
        {
                   new (){45.51, -122.68},
                   new (){37.77, -122.43},
                   new (){34.04, -118.2}
        };
        await map.CreatePath(coords, "red");
    }

    private async Task CreateFlightPath()
    {
        await ResetMap();

        LastHoldingResult = null;
        LastException = null;
        IsLoading = true;
        StateHasChanged();
        try
        {

            var endpoint = UseFallbackApi ? "fallback" : "traffic";
            var res = await httpClient.GetAsync($"{endpoint}/history/{FlightId}");


            if (!res.IsSuccessStatusCode)
            {
                throw new HttpRequestException($"{res.StatusCode}: {await res.Content.ReadAsStringAsync()}");
            }
            var data = await res.Content.ReadFromJsonAsync<List<TrafficPosition>>();
            var dataList = new List<List<double>>();

            if (data != null)
                foreach (var point in data)
                {
                    dataList.Add(new List<double>() { point.Lat, point.Lon });
                }

            await map.CreatePath(dataList, Color);
        }
        catch (Exception e)
        {
            LastException = e;
        }
        finally
        {
            IsLoading = false;
        }

        if(LastException is null)
        {
            await CheckForHolding();
        }
    }

}
